
//        size_t km = k + m;
//        __int128 r3 = a.data_[km - 1] * SHIFTED + a.data_[km - 2];
//        if (km >= 3)
//            r3 = r3 * SHIFTED + a.data_[km - 3];
//
//        uint64_t d2 = b.data_[m - 1] * SHIFTED + b.data_[m - 2];
//        uint64_t trial = std::min(static_cast<uint64_t>(r3 / d2), SHIFTED - 1);
//
//        big_integer dq = b * trial;
//        bool smaller = false;
//        int i = dq.size_ - 1;
//        size_t t = (dq.size_ > b.size_ ? 1 : 0);
//        while (i >= 0) {
//            if (a.data_[i + k - t] != dq.data_[i]) {
//                smaller = a.data_[i + k - t] < dq.data_[i];
//                break;
//            }
//            else i--;
//        }
//
//        if (smaller) {
//            trial--;
//            dq = b * trial;
//        }
//        t = (dq.size_ > b.size_ ? 1 : 0);
//        q.data_[k - t] = static_cast<ui>(trial);
//        a -= dq << ((k - t) * SHIFT);


//        big_integer dq = b * trial;
//        bool smaller = true;
//        while (smaller) {
//            smaller = false;
//            int i = dq.size_ - 1;
//            size_t t = size_ - dq.size_;
//            while (i >= 0) {
//                if (data_[i + t] != dq.data_[i]) {
//                    smaller = data_[i + t] < dq.data_[i];
//                    break;
//                } else i--;
//            }
//
//            if (smaller) {
//                --trial;
//                dq = b * trial;
//            }
//        }
//        normalize(dq);
//        if (k - 1 >= 0)
//            q.data_[k - 1] = static_cast<ui>(trial);
//        *this -= dq << ((k - 1) * SHIFT);